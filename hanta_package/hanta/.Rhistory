o_data$Sample[which(o_data$Sample == "K562")] <- "old K562 nuclei"]
o_data <- read.csv("old_data.csv", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE)
o_data <- subset(o_data, o_data$Sample %in% c("Brain", "K562"))
o_data$Sample[which(o_data$Sample == "Brain")] <- "old brain nuclei"
o_data$Sample[which(o_data$Sample == "K562")] <- "old K562 nuclei"
head(o_data)
boxplot(o_data$Aligned_Reads/ o_data$Valid_Reads)
o_data$Human_Exon_Frac <- o_data$Assigned_Reads_Exon / o_data$Aligned_Reads
o_data$Human_Intron_Frac <- (o_data$Assigned_Reads_Gene - o_data$Assigned_Reads_Exon) / o_data$Aligned_Reads
o_data$Human_Inter_Ambig_Frac <- 1 - (o_data$Human_Exon_Frac + o_data$Human_Intron_Frac)
head(o_data)
o_data <- o_data[,c("Barcode", "Row", "Col", "Sample", "Valid_Reads", "Aligned_Reads",
"Assigned_Reads_Gene", "Assigned_Reads_Exon", "Unique_Genes_Gene",
"Human_Exon_Frac", "Human_Intron_Frac", "Human_Inter_Ambig_Frac")]
t <- read.csv("sce-1568_data.csv")
#t <- t[t$Type %in% c("new brain nuclei", "new K562 nuclei"),]
s <- h_data[,c("Barcode", "Gene_Aligned_Reads", "Gene_Assigned_Reads",
"Exon_Assigned_Reads", "Gene_Unique_Genes", "Human_Exon_Frac", "Human_Intron_Frac", "Human_Inter_Ambig_Frac")]
t <- merge(t[,c(1:ncol(t) - 1)], s[which(s$Barcode %in% t$Barcode), ], by  = "Barcode")
colnames(t)[colnames(t) == "Gene_Aligned_Reads"] <- "Aligned_Reads"
colnames(t)[colnames(t) == "Gene_Unique_Genes"] <- "Unique_Genes"
head(t)
colnames(t)
colnames(o)
colnames(o_data)
head(t)
head(o_data)
boxplot(t$Aligned_Reads / t$Valid_Reads)
boxplot(o_data$Aligned_Reads / o_data$Valid_Reads)
t <- read.csv("sce-1568_data.csv")
head(t)
head(h_data)
plot(h_data$Gene_Aligned_Reads / h_data$Gene_Valid_Reads)
boxplot(h_data$Gene_Aligned_Reads / h_data$Gene_Valid_Reads)
t
head(t)
plot(t$Valid_Reads, t$Unique_Genes)
plot(t$Valid_Reads, t$Unique_Genes, log ='xy')
t <- read.csv("sce-1568_data.csv")
t <- t[t$Type %in% c("new brain nuclei", "new K562 nuclei"),]
s <- h_data[,c("Barcode", "Gene_Aligned_Reads", "Gene_Assigned_Reads",
"Exon_Assigned_Reads", "Gene_Unique_Genes", "Human_Exon_Frac", "Human_Intron_Frac", "Human_Inter_Ambig_Frac")]
t <- merge(t[,c(1:ncol(t) - 1)], s[which(s$Barcode %in% t$Barcode), ], by  = "Barcode")
colnames(t)[colnames(t) == "Gene_Aligned_Reads"] <- "Aligned_Reads"
colnames(t)[colnames(t) == "Gene_Unique_Genes"] <- "Unique_Genes"
setwd("/Users/chardy/Desktop/sce-1568")
o_data <- read.csv("old_data.csv", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE)
o_data <- subset(o_data, o_data$Sample %in% c("Brain", "K562"))
o_data$Sample[which(o_data$Sample == "Brain")] <- "old brain nuclei"
o_data$Sample[which(o_data$Sample == "K562")] <- "old K562 nuclei"
o_data$Human_Exon_Frac <- o_data$Assigned_Reads_Exon / o_data$Aligned_Reads
o_data$Human_Intron_Frac <- (o_data$Assigned_Reads_Gene - o_data$Assigned_Reads_Exon) / o_data$Aligned_Reads
o_data$Human_Inter_Ambig_Frac <- 1 - (o_data$Human_Exon_Frac + o_data$Human_Intron_Frac)
o_data <- o_data[,c("Barcode", "Row", "Col", "Sample", "Valid_Reads", "Aligned_Reads",
"Assigned_Reads_Gene", "Assigned_Reads_Exon", "Unique_Genes_Gene",
"Human_Exon_Frac", "Human_Intron_Frac", "Human_Inter_Ambig_Frac")]
colnames(o_data) <- colnames(t)
t <- rbind(t, o_data)
col_t[4] <- icell8:::add.alpha("slateblue")
plot(t$Valid_Reads, t$Aligned_Reads, col = col_t[1:4][factor(t$Type)], pch = 19, log = 'xy')
boxplot(t$Aligned_Reads / t$Valid_Reads ~ t$Type)
legend("topright", legend = levels(factor(t$Type)), col = col_t[1:4], pch = 19)
boxplot(t$Aligned_Reads / t$Valid_Reads ~ t$Type)
plot(t$Valid_Reads, t$Aligned_Reads, col = col_t[1:4][factor(t$Type)], pch = 19, log = 'xy')
plot(t$Valid_Reads, t$Gene_Assigned_Reads, col = col_t[1:4][factor(t$Type)], pch = 19, log = 'xy')
plot(t$Valid_Reads, t$Exon_Assigned_Reads, col = col_t[1:4][factor(t$Type)], pch = 19, log = 'xy')
legend("topright", legend = levels(factor(t$Type)), col = col_t[1:4], pch = 19)
plot(t$Valid_Reads, t$Exon_Assigned_Reads, col = col_t[1:4][factor(t$Type)], pch = 19, log = 'xy')
legend("topleft", legend = levels(factor(t$Type)), col = col_t[1:4], pch = 19)
plot(t$Assigned_Reads, t$Unique_Genes, col = col_t[1:4][factor(t$Type)], pch = 19, log = 'xy')
plot(t$Assigned_Reads, t$Unique_Genes, col = col_t[1:4][factor(t$Type)], pch = 19, log = 'xy')
plot(t$Exon_Assigned_Reads, t$Unique_Genes, col = col_t[1:4][factor(t$Type)], pch = 19, log = 'xy')
legend("topleft", legend = levels(factor(t$Type)), col = col_t[1:4], pch = 19)
plot(t$Gene_Assigned_Reads, t$Unique_Genes, col = col_t[1:4][factor(t$Type)], pch = 19, log = 'xy')
plot(t$Human_Inter_Ambig_Frac, t$Unique_Genes, col = col_t[1:4][factor(t$Type)], pch = 19, log = 'xy')
legend("topleft", legend = levels(factor(t$Type)), col = col_t[1:4], pch = 19)
plot(t$Human_Intron_Frac, t$Unique_Genes, col = col_t[1:4][factor(t$Type)], pch = 19, log = 'xy')
plot(t$Human_Exon_Frac, t$Unique_Genes, col = col_t[1:4][factor(t$Type)], pch = 19, log = 'xy')
head(t)
identical(t$Human_Exon_Frac, t$Exon_Assigned_Reads / t$Aligned_Reads)
identical(t$Human_Gene_Frac, t$Gene_Assigned_Reads / t$Aligned_Reads)
setdiff(t$Human_Gene_Frac, t$Gene_Assigned_Reads / t$Aligned_Reads)
plot(t$Human_Gene_Frac, t$Gene_Assigned_Reads / t$Aligned_Reads)
plot(t$Human_Intron_Frac, (t$Gene_Assigned_Reads - t$Exon_Assigned_Reads) / t$Aligned_Reads)
identical(t$Human_Intron_Frac, (t$Gene_Assigned_Reads - t$Exon_Assigned_Reads) / t$Aligned_Reads)
head(t)
boxplot(t$Human_Intron_Frac)
max(t$Human_Intron_Frac)
which(t$Human_Intron_Frac == max(t$Human_Intron_Frac))
which(t$Human_Intron_Frac == max(t$Human_Intron_Frac))
t$Human_Intron_Frac
t[596,]
which(t$Human_Intron_Frac < 0)
t[c(99, 335, 435),]
getwd()
write.csv(t, file = "sce-1568_all_data.csv", quote = FALSE, row.names = FALSE)
boxplot(t$Aligned_Reads / t$Valid_Reads ~ t$Type)
plot(t$Human_Exon_Frac, t$Unique_Genes, col = col_t[1:4][factor(t$Type)], pch = 19, log = 'xy')
legend("topleft", legend = levels(factor(t$Type)), col = col_t[1:4], pch = 19)
plot(t$Valid_Reads, t$Unique_Genes, col = col_t[1:4][factor(t$Type)], pch = 19, log = 'xy')
exon.fc <- read.table("s1_97456_exon.featureCounts.summary")
setwd('/Users/chardy/Desktop/bio-1445/s1_97456')
exon.fc <- read.table("s1_97456_exon.featureCounts.summary")
head(exon.fc)
exon.fc <- read.table("s1_97456_exon.featureCounts.summary", header = T, stringsAsFactors = F)
exon.fc <- read.table("s1_97456_exon.featureCounts.summary", header = TRUE,
stringsAsFactors = FALSE)
head(exon.fc)
gene.fc <- read.table("s1_97456_gene.featureCounts.summary", header = TRUE,
stringsAsFactors = FALSE)
gene.fc
exon.fc <- read.table("s1_97456_exon.featureCounts.summary", header = TRUE,
stringsAsFactors = FALSE, row.names = 1L)
gene.fc <- read.table("s1_97456_gene.featureCounts.summary", header = TRUE,
stringsAsFactors = FALSE, row.names = 1L)
gene.fc
gene.fc[["Unassigned_NoFeatures"]]
gene.fc["Unassigned_NoFeatures",]
total <- sum(gene.fc[c("Assigned", "Unassigned_NoFeatures", "Unassigned_Ambiguity"), ])
total
inter <- gene.fc["Unassigned_NoFeatures",] / total
inter
exon <- exon.fc["Assigned"]
exon.fc
exon.fc["Assigned", ]
total
sum(exon.fc[c("Assigned", "Unassigned_NoFeatures", "Unassigned_Ambiguity"), ])
exon <- exon.fc["Assigned", ] / total
exon
intron <- (gene.fc["Assigned", ] - exon.fc["Assigned", ]) / total
intron
gene.fc["Assigned", ]
exon.fc["Assigned", ]
exon <- exon.fc["Assigned", ] / total
exon
inter
setwd('/Users/chardy/Desktop/bio-1445/s2_100222')
exon.fc <- read.table("s2_100222_exon.featureCounts.summary", header = TRUE,
stringsAsFactors = FALSE, row.names = 1L)
gene.fc <- read.table("s2_100222_gene.featureCounts.summary", header = TRUE,
stringsAsFactors = FALSE, row.names = 1L)
total <- sum(gene.fc[c("Assigned", "Unassigned_NoFeatures", "Unassigned_Ambiguity"), ])
inter <- gene.fc["Unassigned_NoFeatures",] / total
exon <- exon.fc["Assigned", ] / total
intron <- (gene.fc["Assigned", ] - exon.fc["Assigned", ]) / total
exon
intron
inter
m <- read.csv("s1_97456.multimap_stats.csv", stringsAsFactors = FALSE, header = TRUE)
setwd('/Users/chardy/Desktop/bio-1445/s1_97456')
m <- read.csv("s1_97456.multimap_stats.csv", stringsAsFactors = FALSE, header = TRUE)
head(m)
plot(m$Valid_Reads, m$Unique_Genes)
plot(m$Valid_Reads, m$Unique_Genes, log = 'xy')
w <- read.table("97456_selected_WellList180130.TXT", stringsAsFactors = FALSE, header = TRUE)
w <- read.table("97456_selected_WellList180130.TXT", sep = '\t', stringsAsFactors = FALSE, header = TRUE)
head(w)
w <- read.table("97456_selected_WellList180130.TXT", sep = '\t',
stringsAsFactors = FALSE, header = TRUE, check.names = FALSE)
w
head(w)
table(w$Sample)
head(m)
dim(m)
dim(w)
metadata <- merge(m, w, by = "Barcode")
head(metadata)
table(metadata$Candidate)
table(metadata$Cells1)
table(metadata$State)
subset(metadata, metadata$State == "Good")
t <- subset(metadata, metadata$State == "Good")
plot(t$Valid_Reads, t$Unique_Genes)
metadata
metadata$Candidate
t <- subset(metadata, metadata$Candidate == "True")
t
plot(t$Valid_Reads, t$Unique_Genes)
plot(t$Valid_Reads, t$Unique_Genes, log = 'xy')
head(metadata)
head(metadata)
boxplot(metadata$Unique_Genes, metadata$Sample)
boxplot(metadata$Unique_Genes ~ metadata$Sample)
boxplot(metadata$Assigned_Reads / metadata$Aligned_Reads ~ metadata$Sample)
boxplot(metadata$Assigned_Reads / metadata$Aligned_Reads ~ metadata$Sample)
boxplot(metadata$Assigned_Reads ~ metadata$Sample)
boxplot(metadata$Aligned_Reads ~ metadata$Sample)
boxplot(metadata$Valid_Reads ~ metadata$Sample)
gm <- gm.reader('s1_97456.multimap_genematrix_sansUMI.csv', type = "gm")
head(gm[,1:3])
gm <- t(gm)
head(gm[,1:3])
row.names(metadata) <- metadata$Barcode
dim(gm)
dim(metadata)
head(match(rownames(metadata), colnames(gm)))
identical(rownames(metadata), colnames(gm))
match(rownames(metadata), colnames(gm))
match(c(1,2,3), c(3,2,4))
c(1,2,3)[match(c(1,2,3), c(3,2,4))]
c(3,2,4)[match(c(1,2,3), c(3,2,4))]
gm <- gm[ , t]
t <- match(rownames(metadata), colnames(gm))
gm <- gm[ , t]
identical(rownames(metadata), colnames(gm))
boxplot(colSums(gm))
hist(colSums(gm))
hist(colSums(gm) > 10000)
sum(colSums(gm) > 10000)
?gm.qc
gm_qc <- gm.qc(gm = gm, metadata = metadata, gm_norm = TRUE,
gm_norm_method = "cc_mc", gm_log = TRUE, gm_log_base = "ln")
hist(colSums(gm))
hist(colSums(gm_qc$gm))
?gm.cor_analysis
gm_cor <- gm.cor_analysis(gm_qc$gm, metadata = metadata$gm_qc, cor_type = "pearson",
grouping_var = "Sample", heatmap = TRUE, dist_boxplot = TRUE,
dist_table = TRUE, ext = "png")
head(gm_qc$metadata)
gm_cor <- gm.cor_analysis(gm_qc$gm, metadata = gm_qc$metadata, cor_type = "pearson",
grouping_var = "Sample", heatmap = TRUE, dist_boxplot = TRUE,
dist_table = TRUE, ext = "png")
gm_qc$metadata$Sample
topgenes <- pca.gene_filter(gm_qc$gm, method = "top_var", top_genes = 500,
transform_type = "ln")
head(topgenes)
tsne_obj <- gm.tsne(topgenes, metadata = gm_qc$metadata, ext = "png", file = 'tsne.png')
tsne_obj
?gm.tsne
ext = "png", file = 'tsne.png')
tsne_obj <- gm.tsne(topgenes, metadata = gm_qc$metadata, plot = TRUE,
ext = "png", file = 'tsne.png')
head(gm[,1:3])
pca_data <- gm.pca(gm = gm_qc$gm, metadata = gm_qc$metadata,
filt_method = "top_var", top_genes = 500,
transform_type = "ln",
plot = TRUE, file = file.path(getwd(), "pca.pdf"), ext = "png")
tsne_data <- gm.tsne(gm = pca_data$pca_genes, metadata = gm_qc$metadata,
dims = 2, theta = 0.25,
max_iter = 1500, pca_center = FALSE, pca_scale = FALSE,
initial_dims = icell8:::tsne.intial_dims(pca_data$pca_obj),
plot = TRUE, file = file.path(getwd(), "tSNE.pdf"), ext = "png")
cluster_data <- list(gm = gm_qc$gm,
gms_top_genes = pca_data$pca_genes,
metadata = gm_qc$metadata,
pca = pca_data$pca_obj, tsne = tsne_data,
grouping_var = NULL,
transformation_type = "ln")
save(cluster_data, file = file.path(getwd(), "ICELL8_cluster_data.rda"))
?tsne.shiny
tsne.shin(cluster_data = "ICELL8_cluster_data.rda")
tsne.shiny(cluster_data = "ICELL8_cluster_data.rda")
?gm.qc
?ICELL8.analysis
head(gm[,1:3])
head(gm_qc$gm[,1:3])
head(gm_qc$metadata)
tsne.shin(cluster_data = "ICELL8_cluster_data.rda")
tsne.shiny()
pca_data <- gm.pca(gm = gm_qc$gm, metadata = gm_qc$metadata,
filt_method = "top_var", top_genes = 500,
transform_type = "ln",
plot = TRUE, file = file.path(getwd(), "pca.pdf"), ext = "png")
tsne_data <- gm.tsne(gm = pca_data$pca_genes, metadata = gm_qc$metadata,
dims = 2, theta = 0.25, perplexity = 20
max_iter = 1500, pca_center = FALSE, pca_scale = FALSE,
initial_dims = icell8:::tsne.intial_dims(pca_data$pca_obj),
plot = TRUE, file = file.path(getwd(), "tSNE.pdf"), ext = "png")
cluster_data <- list(gm = gm_qc$gm,
gms_top_genes = pca_data$pca_genes,
metadata = gm_qc$metadata,
pca = pca_data$pca_obj, tsne = tsne_data,
grouping_var = NULL,
transformation_type = "ln")
save(cluster_data, file = file.path(getwd(), "ICELL8_cluster_data.rda"))
pca_data <- gm.pca(gm = gm_qc$gm, metadata = gm_qc$metadata,
filt_method = "top_var", top_genes = 500,
transform_type = "ln",
plot = TRUE, file = file.path(getwd(), "pca.pdf"), ext = "png")
tsne_data <- gm.tsne(gm = pca_data$pca_genes, metadata = gm_qc$metadata,
dims = 2, theta = 0.25, perplexity = 10
max_iter = 1500, pca_center = FALSE, pca_scale = FALSE,
initial_dims = icell8:::tsne.intial_dims(pca_data$pca_obj),
plot = TRUE, file = file.path(getwd(), "tSNE.pdf"), ext = "png")
cluster_data <- list(gm = gm_qc$gm,
gms_top_genes = pca_data$pca_genes,
metadata = gm_qc$metadata,
pca = pca_data$pca_obj, tsne = tsne_data,
grouping_var = NULL,
transformation_type = "ln")
save(cluster_data, file = file.path(getwd(), "ICELL8_cluster_data.rda"))
pca_data <- gm.pca(gm = gm_qc$gm, metadata = gm_qc$metadata,
filt_method = "top_var", top_genes = 500,
transform_type = "ln",
plot = TRUE, file = file.path(getwd(), "pca.pdf"), ext = "png")
tsne_data <- gm.tsne(gm = pca_data$pca_genes, metadata = gm_qc$metadata,
dims = 2, theta = 0.25, perplexity = 10,
max_iter = 1500, pca_center = FALSE, pca_scale = FALSE,
initial_dims = icell8:::tsne.intial_dims(pca_data$pca_obj),
plot = TRUE, file = file.path(getwd(), "tSNE.pdf"), ext = "png")
cluster_data <- list(gm = gm_qc$gm,
gms_top_genes = pca_data$pca_genes,
metadata = gm_qc$metadata,
pca = pca_data$pca_obj, tsne = tsne_data,
grouping_var = NULL,
transformation_type = "ln")
save(cluster_data, file = file.path(getwd(), "ICELL8_cluster_data.rda"))
tsne.shiny
tsne.shiny()
tsne.shiny()
library("seurat")
library(Seurat)
install.packages("Seurat")
library(Seurat)
?CreateSeuratObject
library(Seurat)
rm(list=ls())
library(icell8)
# ---------- sample 1 ---------- #
setwd('/Users/chardy/Desktop/bio-1445/s1_97456')
exon.fc <- read.table("s1_97456_exon.featureCounts.summary", header = TRUE,
stringsAsFactors = FALSE, row.names = 1L)
gene.fc <- read.table("s1_97456_gene.featureCounts.summary", header = TRUE,
stringsAsFactors = FALSE, row.names = 1L)
total <- sum(gene.fc[c("Assigned", "Unassigned_NoFeatures",
"Unassigned_Ambiguity"), ])
inter <- gene.fc["Unassigned_NoFeatures",] / total
exon <- exon.fc["Assigned", ] / total
intron <- (gene.fc["Assigned", ] - exon.fc["Assigned", ]) / total
m <- read.csv("s1_97456.multimap_stats.csv", stringsAsFactors = FALSE,
header = TRUE)
w <- read.table("97456_selected_WellList180130.TXT", sep = '\t',
stringsAsFactors = FALSE, header = TRUE, check.names = FALSE)
metadata <- merge(m, w, by = "Barcode")
row.names(metadata) <- metadata$Barcode
gm <- gm.reader('s1_97456.multimap_genematrix_sansUMI.csv', type = "gm")
gm <- t(gm)
t <- match(rownames(metadata), colnames(gm))
gm <- gm[ , t]
identical(rownames(metadata), colnames(gm))
gm_qc <- gm.qc(gm = gm, metadata = metadata, gm_norm = TRUE,
gm_norm_method = "cc_mc", gm_log = TRUE, gm_log_base = "ln")
gm_cor <- gm.cor_analysis(gm_qc$gm, metadata = gm_qc$metadata, cor_type = "pearson",
grouping_var = "Sample", heatmap = TRUE, dist_boxplot = TRUE,
dist_table = TRUE, ext = "png")
pca_data <- gm.pca(gm = gm_qc$gm, metadata = gm_qc$metadata,
filt_method = "top_var", top_genes = 500,
transform_type = "ln",
plot = TRUE, file = file.path(getwd(), "pca.pdf"), ext = "png")
tsne_data <- gm.tsne(gm = pca_data$pca_genes, metadata = gm_qc$metadata,
dims = 2, theta = 0.25, perplexity = 10,
max_iter = 1500, pca_center = FALSE, pca_scale = FALSE,
initial_dims = icell8:::tsne.intial_dims(pca_data$pca_obj),
plot = TRUE, file = file.path(getwd(), "tSNE.pdf"), ext = "png")
cluster_data <- list(gm = gm_qc$gm,
gms_top_genes = pca_data$pca_genes,
metadata = gm_qc$metadata,
pca = pca_data$pca_obj, tsne = tsne_data,
grouping_var = NULL,
transformation_type = "ln")
save(cluster_data, file = file.path(getwd(), "ICELL8_cluster_data.rda"))
library("Suerat")
library("Suerat")
library("Seurat")
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
library(icell8)
library(Seurat)
CreateSeuratObject
CreateSeuratObject()
library(devtools)
devtools::install_github("satijalab/seurat")
library("Seurat")
library(seurat)
CreateSeuratObject()
library(Seurat)
source("http://bioconductor.org/biocLite.R")
devtools::install_github("satijalab/seurat")
R.utils::gcDLLs()
sessionInfo()
library(icell8)
library(hanta)
?hanta::gm.reader
library(hanta)
sessionInfo()
library(hanta)
yoyo <- gm.reader("/Users/chardy/Desktop/chem_cookoff/sce-1533/fl", type = "gm")
yoyo <- gm.reader("/Users/chardy/Desktop/chem_cookoff/sce-1533/fl.csv", type = "gm")
yoyo <- gm.reader("fl_reslist_fl_500K.results.multimap_genematrix_sansUMI.csv", type = "gm")
yoyo <- gm.reader("/Users/chardy/Desktop/chem_cookoff/sce-1533/fl_reslist_fl_500K.results.multimap_genematrix_sansUMI.csv", type = "gm")
yoyo <- gm.reader("/Users/chardy/Desktop/chem_cookoff/sce-1533/fl/fl_reslist_fl_500K.results.multimap_genematrix_sansUMI.csv", type = "gm")
yoyo <- t(yoyo)
head(yoyo[,1:3])
dim(yoyo)
yoyo["ENSG00000133703",]
hist(yoyo["ENSG00000133703",])
yoyo_3p <- gm.reader("/Users/chardy/Desktop/chem_cookoff/sce-1533/3p/3p_reslist_3p_500K.results.multimap_genematrix_sansUMI.csv", type = "gm")
dim(yoyo)
dim(yoyo_3p)
hist(yoyo_3p["ENSG00000133703",])
yoyo_3p["ENSG00000133703",]
yoyo_3p <- t(yoyo_3p)
hist(yoyo_3p["ENSG00000133703",])
hist(yoyo["ENSG00000133703",])
sum(yoyo_3p["ENSG00000133703",])
sum(yoyo["ENSG00000133703",])
mean(yoyo["ENSG00000133703",])
mean(yoyo_3p["ENSG00000133703",])
?lapply
for(x in bp){print(x)})
library(icell8)
gm <- gm.reader("/Users/chardy/Downloads/sce-1584_results", type = "gm")
gm <- gm.reader("/Users/chardy/Downloads/sce-1584_results/wta463.multimap_genematrix_sansUMI.csv", type = "gm")
gm <- t(gm)
head(gm[,1:3])
write.csv(gm, file = "/Users/chardy/Desktop/wta463.multimap_genematrix_sansUMI.csv", quote = F)
dim(gm)
?install.github
sessionInfo()
library(NMF)
remove.packages("NMF")
library(NMF)
remove.packages("NMF")
library(NMF
)
NMF::aheamap()
library(hanta)
library(NMF)
library(hanta)
library(NMF)
library(hanta)
library(NMF)
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(NMF)
sessioninfo()
sessionInfo()
devtools::install(".")
sessionInfo()
library(NMF)
sessionInfo()
devtools::install(".")
library(hanta)
ip <- as.data.frame(installed.packages())
ip <- subset(ip, !grepl("MRO", ip$LibPath))
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
path.lib <- unique(ip$LibPath)
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
library(icell8)
library(hanta)
remove.packages(hanta)
remove.packages("hanta")
library(NMF)
devtools::install(".")
install.packages(c(‘NMF’, ‘optparse’, ‘impute’, ‘preprocessCore’, ‘GO.db’, ‘sva’, ‘reshape2’, ‘RColorBrewer’, ‘Rtsne’, ‘WGCNA’, ‘gridExtra’, ‘gtable’, ‘naturalsort’, ‘futile.logger’, ‘VennDiagram’, ‘knitr’, ‘kableExtra’, ‘plotrix’, ‘shiny’, ‘pkgmaker’, ‘rmarkdown’, ‘htmltools’))
install.packages(c("NMF", "optparse", "impute", "preprocessCore", "GO.db", "sva", "reshape2", "RColorBrewer", "Rtsne", "WGCNA", "gridExtra", "gtable", "naturalsort", "futile.logger", "VennDiagram", "knitr", "kableExtra", "plotrix", "shiny", "pkgmaker", "rmarkdown", "htmltools"))
install.packages(c("NMF", "optparse", "impute", "preprocessCore", "GO.db", "sva", "reshape2", "RColorBrewer", "Rtsne", "WGCNA", "gridExtra", "gtable", "naturalsort", "futile.logger", "VennDiagram", "knitr", "kableExtra", "plotrix", "shiny", "pkgmaker", "rmarkdown", "htmltools"))
devtools::install(".")
install.packages(devtools)
install.packages("devtools")
devtools::install(".")
devtools::install(".")
?devtools::install()
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
devtools::install(".")
source("http://bioconductor.org/biocLite.R")
