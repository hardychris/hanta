identical(gm_out[ , 1:3], gm_test_norm_cc_mc[ , 1:3])
identical(gm_out[ , 1:3], gm.log(gm_test[, 1:3], log_base = "ln"))
gm_out <- gm.qc(gm_test, gm_qcfilt = FALSE, gm_norm = FALSE, gm_log = TRUE, gm_log_base = "ln")
identical(gm_out[ , 1:3], gm.log(gm_test[, 1:3], log_base = "ln"))
gm_out <- gm.qc(gm_test, gm_qcfilt = FALSE, gm_norm = FALSE, gm_log = TRUE, gm_log_base = 2)
identical(gm_out[ , 1:3], gm.log(gm_test[, 1:3], log_base = 2))
gm_out <- gm.qc(gm_test, gm_qcfilt = FALSE, gm_norm = TRUE, gm_norm_method = "tps", gm_norm_scale = 1e4, gm_log = FALSE)
identical(gm_out, gm_test_norm_tps)
gm_out <- gm.qc(gm_test, gm_qcfilt = FALSE, gm_norm = TRUE, gm_norm_method = "cc_mc", gm_log = FALSE)
identical(gm_out, gm_test_norm_cc_mc)
gm_out <- gm.qc(gm_test, gm_qcfilt = FALSE, gm_norm = FALSE, gm_log = TRUE, gm_log_base = "ln")
identical(gm_out, gm.log(gm_test, log_base = "ln"))
gm_out <- gm.qc(gm_test, gm_qcfilt = FALSE, gm_norm = FALSE, gm_log = TRUE, gm_log_base = 2)
identical(gm_out, gm.log(gm_test, log_base = 2))
?gm.qc
gm_out <- gm.qc(gm_test, gm_qcfilt = TRUE, gm_norm = FALSE, gm_log = FALSE, gene_cellcount = 100)
dim(gm_out)
gm_out <- gm.qc(gm_test, gm_qcfilt = TRUE, gm_norm = FALSE, gm_log = FALSE, gene_cellcount = 2)
dim(gm_out)
gm_out <- gm.qc(gm_test, gm_qcfilt = TRUE, gm_norm = FALSE, gm_log = FALSE, cell_abslowcov = 2e4)
drops <- qc.flag_cells_lowcov(gm_test, mad_devs = 3, abs_thresh = 2e4)
identical(gm_out, gm_test[ , !(drops)]))
gm_out <- gm.qc(gm_test, gm_qcfilt = TRUE, gm_norm = FALSE, gm_log = FALSE, cell_abslowcov = 2e4)
drops <- qc.flag_cells_lowcov(gm_test, mad_devs = 3, abs_thresh = 2e4)
identical(gm_out, gm_test[ , !(drops)])
dim(gm_out)
dim(gm_test[,!(drops)])
drp[s]
drops
dim(gm_out)
gm_out <- gm.qc(gm_test, gm_qcfilt = TRUE, gm_norm = FALSE, gm_log = FALSE,
cell_abslowcov = 2e4, cells_abslowgenecount = 0, gene_cellcount = 0, gene_totcov = 0)
drops <- qc.flag_cells_lowcov(gm_test, mad_devs = 3, abs_thresh = 2e4)
identical(gm_out, gm_test[ , !(drops)])
dim(gm_out)
dim(gm_test)
shiny::runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
shiny::runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
ceiling(10)
ceiling(10.1)
ceiling(1)
ceiling(0)
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
?toggleModal
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
withProgress
?withProgress
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
?HTML
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
intall.packages('shinydashboard')
install.packages('shinydashboard')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
?fileInput
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
?bsModal
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
?bsModal
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
?observeEvent
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
?actionButton
?modalButton
?tagList
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
?column
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
?fluidRow
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
?shiny:::runApp
shiny:::runApp("/Users/chardy/Desktop/icell8_release/icell8_R/icell8/inst/shiny_apps/tsne", display.mode = "showcase")
options(shiny.reactlog=TRUE)
shiny:::runApp("/Users/chardy/Desktop/icell8_release/icell8_R/icell8/inst/shiny_apps/tsne", display.mode = "showcase")
?shiny::showReactLog
?shiny:::runApp
shiny:::runApp("/Users/chardy/Desktop/icell8_release/icell8_R/icell8/inst/shiny_apps/tsne", display.mode = "showcase", launch.browser = TRUE)
?shiny:::runApp
?shiny::showReactLog
options(shiny.reactlog=TRUE)
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectizeInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/takaratoolkit')
runApp('~/Desktop/takaratoolkit')
runApp('~/Desktop/takaratoolkit')
runApp('~/Desktop/fqc_database')
?dataTableOutput
runApp('~/Desktop/fqc_database')
runApp('~/Desktop/fqc_database')
?uiOutput
runApp('~/Desktop/fqc_database')
runApp('~/Desktop/fqc_database')
runApp('~/Desktop/fqc_database')
runApp('~/Desktop/takaratoolkit')
runApp('~/Desktop/takaratoolkit')
runApp('~/Desktop/takaratoolkit')
runApp('~/Desktop/takaratoolkit')
runApp('~/Desktop/takaratoolkit')
runApp('~/Desktop/takaratoolkit')
?hr
runApp('~/Desktop/takaratoolkit')
runApp('~/Desktop/takaratoolkit')
runApp('~/Desktop/takaratoolkit')
runApp('~/Desktop/takaratoolkit')
runApp('~/Desktop/takaratoolkit')
runApp('~/Desktop/takaratoolkit')
runApp('~/Desktop/takaratoolkit')
?available.packages
?available.packages()
?available.packages(http://cran.cnr.berkeley.edu/)
?available.packages("http://cran.cnr.berkeley.edu/")
installed.packages()
icell8.install_cran <- function(pkg, ver, repos = "cran",
type = "both", suppressUpdates = TRUE, ask = FALSE){
if(repos == "cran"){cran <- "http://cran.cnr.berkeley.edu/"}
ipkgs <- installed.packages()
if(pkg %in% rownames(ipkgs) == FALSE){
if(repos == "bioconductor"){
source("https://bioconductor.org/biocLite.R")
biocLite(pkg, suppressUpdates = suppressUpdates, ask = ask)
} else {
install.packages(pkg, repos = repos, type = type)
}
} else if(packageVersion(pkg) < ver) {
if(repos == "bioconductor"){
source("https://bioconductor.org/biocLite.R")
biocLite(pkg, suppressUpdates = suppressUpdates, ask = ask)
} else {
install.packages(pkg, repos = repos, type = type)
}
} else {
cat(paste(pkg, packageVersion(pkg), "previously installed\n"))
}
}
icell8.install_cran("yaml", ver = "2.1.18")
yoyo <- data.frame(pkg = c("yaml",
"data.table",
"later",
"robustbase",
"pillar",
"httpuv",
"sourcetools",
"stringi"),
ver = c("2.1.18",
"1.10.4.3",
"0.7.1",
"0.92.8",
"1.2.1",
"1.4.0",
"0.1.6",
"1.1.7"),
repos = c("cran",
"cran",
"cran",
"cran",
"cran",
"cran",
"cran",
"cran"
))
# ---------- install | cran | binary ---------- #
t <- apply(yoyo, 1, function(x){
icell8.install_cran(pkg = x[1], ver = x[2], type = "both")
})
t
library(impute)
sessionInfo()
library(c("impute",
"preprocessCore",
"GO.db",
"sva",
"BiocParallel",
"survival",
"cluster",
"foreign",
"Matrix",
"nlme",
"MASS",
"mgcv"))
sapply(c("impute",
"preprocessCore",
"GO.db",
"sva",
"BiocParallel",
"survival",
"cluster",
"foreign",
"Matrix",
"nlme",
"MASS",
"mgcv"), library)
lapply(c("impute",
"preprocessCore",
"GO.db",
"sva",
"BiocParallel",
"survival",
"cluster",
"foreign",
"Matrix",
"nlme",
"MASS",
"mgcv"), library)
lapply(c("impute",
"preprocessCore",
"GO.db",
"sva",
"BiocParallel",
"survival",
"cluster",
"foreign",
"Matrix",
"nlme",
"MASS",
"mgcv"), function(x) print(x))
lapply(c("impute",
"preprocessCore",
"GO.db",
"sva",
"BiocParallel",
"survival",
"cluster",
"foreign",
"Matrix",
"nlme",
"MASS",
"mgcv"), function(x) print(x))
lapply(c("impute",
"preprocessCore",
"GO.db",
"sva",
"BiocParallel",
"survival",
"cluster",
"foreign",
"Matrix",
"nlme",
"MASS",
"mgcv"), function(x) library(x))
lapply(c("impute",
"preprocessCore",
"GO.db",
"sva",
"BiocParallel",
"survival",
"cluster",
"foreign",
"Matrix",
"nlme",
"MASS",
"mgcv"), function(x) {library(x)})
lapply(list("impute",
"preprocessCore",
"GO.db",
"sva",
"BiocParallel",
"survival",
"cluster",
"foreign",
"Matrix",
"nlme",
"MASS",
"mgcv"), function(x) {library(x)})
library("preprocessCore")
library(GO.db)
library("sva")
library(BiocParallel)
library(survival)
library(cluster)
library(foreign)
library(Matrix)
library(nlme)
library(MASS)
library(mgcv)
library(rpart)
sessionInfo()
z <- c("optparse",
"reshape2",
"lattice",
"RColorBrewer",
"Rtsne",
"pcaPP",
"rrcov",
"robust",
"matrixStats",
"survival",
"acepack",
"Hmisc",
"foreach",
"dynamicTreeCut",
"fastcluster",
"doParallel",
"WGCNA",
"NMF",
"gridExtra",
"gtable",
"naturalsort",
"VennDiagram",
"kableExtra",
"plotrix",
"shiny",
"devtools",
"rmarkdown",
"knitr",
"htmltools")
z
sapply(z, library)
library(z)
sapply(z, library, character.only = TRUE)
sessionInfo()
sessionInfo()[[2]]
sessionInfo()[[3]]
sessionInfo()[[4]]
sessionInfo()[[5]]
sessionInfo()[[6]]
names(sessionInfo()[[6]])
sessionInfo()
names(sessionInfo())
sessionInfo()$otherPkgs
sessionInfo()$otherPkgs$Version
names(sessionInfo()$otherPkgs)
sessionInfo()$otherPkgs[[1]]
sessionInfo()$otherPkgs[[1]]$Version
z
sessionInfo()$otherPkgs[[1]][1]
sessionInfo()$otherPkgs[[1]]$Package
lapply(sessionInfo()$otherPkgs, function(x){x$Package})
sessionInfo()$otherPkgs
sessionInfo()$otherPkgs$Package
sessionInfo()$otherPkgs$Packages
a <- list()
b <- list()
lapply(sessionInfo()$otherPkgs, function(x){
if(x$Package %in% z){
a[[x$Package]] <- x$Package
b[[x$Package]] <- x$Version
}
})
a
b
lapply(sessionInfo()$otherPkgs, function(x){
if(x$Package %in% z){
a[[paste0(x$Package)]] <- x$Package
b[[paste0(x$Package)]] <- x$Version
}
})
z
a
c <- lapply(sessionInfo()$otherPkgs, function(x){
if(x$Package %in% z){
b[[paste0(x$Package)]] <- x$Version
}
})
c
c <- na.omit(c)
c
c <- c[is.null(c) == FALSE]
c
is.null(c)
sapply(c, is.null)
c <- c[sapply(c, !(is.null))]
c <- c[sapply(c, function(x) is.null(x) == FALSE)]
c
z
match(z, rownames(c))
match(z, names(c))
match(names(c), z)
c[match(names(c), z)]
c[match(z, names(c))]
c <- c[match(z, names(c))]
c
data.table(c)
data.frame(c)
t(data.frame(c))
library("devtools")
install.packages("pkgmaker", type = "source",
repos = "http://download.r-forge.r-project.org/")
install_github("renozao/NMF", type = "source")
install.packages("pkgmaker", type = "source", repos = "http://download.r-forge.r-project.org/")
source(loc <- "/Users/chardy/Desktop/icell8_test_dist/icell8_setup.R")
remove.packages("plotrix")
source(loc <- "/Users/chardy/Desktop/icell8_test_dist/icell8_setup.R")
library(plotrix)
t
source(loc <- "/Users/chardy/Desktop/icell8_test_dist/icell8_setup.R")
source(loc <- "/Users/chardy/Desktop/icell8_test_dist/icell8_setup.R")
library(plotrix)
source(loc <- "/Users/chardy/Desktop/icell8_test_dist/icell8_setup.R")
source(loc <- "/Users/chardy/Desktop/icell8_test_dist/icell8_setup.R")
source(loc <- "/Users/chardy/Desktop/icell8_test_dist/icell8_setup.R")
source(loc <- "/Users/chardy/Desktop/icell8_test_dist/icell8_setup.R")
source(loc <- "/Users/chardy/Desktop/icell8_test_dist/icell8_setup.R")
source(loc <- "/Users/chardy/Desktop/icell8_test_dist/icell8_setup.R")
source(loc <- "/Users/chardy/Desktop/icell8_test_dist/icell8_setup.R")
detectCores()
detectCores()
parallel::detectCores()
?install.packages
Sys.getenv("MAKE", "make")
cores <- parallel::detectCores()
cores <- if(cores >= 3, 2, 1)
cores
cores <- parallel::detectCores()
cores <- ifelse(cores >= 3, 2, 1)
cores
d <- data.frame(
pkg = c(
c("yaml", "data.table", "later", "robustbase", "pillar", "httpuv",
"sourcetools", "stringi"),
c("impute", "preprocessCore", "GO.db", "sva", "BiocParallel", "survival",
"cluster", "foreign", "Matrix", "nlme", "MASS", "mgcv", "rpart"),
c("optparse", "reshape2", "lattice", "RColorBrewer", "Rtsne", "pcaPP",
"rrcov", "robust", "matrixStats", "survival", "acepack", "Hmisc",
"foreach", "dynamicTreeCut", "fastcluster", "doParallel", "WGCNA",
"NMF", "gridExtra", "gtable", "naturalsort", "VennDiagram", "kableExtra",
"plotrix", "shiny", "devtools", "rmarkdown", "knitr", "htmltools")
),
ver = c(
c("2.1.18","1.10.4.3","0.7.1","0.92.8", "1.2.1","1.4.0", "0.1.6", "1.1.7"),
c("1.52.0", "1.40.0", "3.5.0", "3.26.0", "1.12.0", "2.42-3", "2.0.7-1",
"0.8-69", "1.2-14", "3.1-137", "7.3-49", "1.8-23", "4.1-13"),
c("1.4.4", "1.4.3", "0.20-35", "1.1-2", "0.13", "1.9-73", "1.4-3", "0.4-18",
"0.53.1", "2.42-3", "1.4.1", "4.1-1", "1.4.4", "1.63-1", "1.1.24",
"1.0.11", "1.63", "0.22", "2.3", "0.2.0", "0.1.3", "1.6.20", "0.8.0",
"3.7", "1.0.5", "1.13.5", "1.9", "1.20", "0.3.6")
),
repos = c(
rep("cran", 8),
rep("bioc", 13),
rep("cran", 29)
)
)
d
sapply(d$pkg, remove.packages)
source(loc <- "/Users/chardy/Desktop/icell8_test_dist/icell8_setup.R")
sapply(d$pkg, remove.packages)
install.packages
install.packages()
.rs.callAs
load("/Users/chardy/Downloads/ICELL8_cluster_data.rda")
cluster_data$metadata
sapply(d$pkg, remove.packages)
source(loc <- "/Users/chardy/Desktop/icell8_test_dist/icell8_setup.R")
sapply(d$pkg, remove.packages)
source(loc <- "/Users/chardy/Desktop/icell8_test_dist/icell8_setup.R")
sapply(d$pkg, remove.packages)
source(loc <- "/Users/chardy/Desktop/icell8_test_dist/icell8_setup.R")
ls
sapply(d$pkg, remove.packages)
?biocLite
source(loc <- "/Users/chardy/Desktop/icell8_test_dist/icell8_setup.R")
