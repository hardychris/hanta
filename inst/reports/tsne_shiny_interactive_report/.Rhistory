metadata[[1]]
gm_1 <- gm_test[1:3 , 1:3]
gm_2 <- gm_test[2:6 , 4:6]
gm_3 <- gm_test[c(2,5:8) , 7:9]
gms <- list(Chip_A = gm_1, Chip_B = gm_2, Chip_C = gm_3)
mt_1 <- metadata_test[1:3 , ]
mt_2 <- metadata_test[2:6 , ]
mt_3 <- metadata_test[c(2,5:8) , ]
mts <- list(mt_1, mt_2, mt_3)
mts->metadata
for(i in 1:length(gms)){
barcodes = colnames(gms[[i]])
metadata[[i]] = metadata[[i]][match(barcodes, metadata[[i]]$Barcode), ]
metadata[[i]]["Group"] = if(is.null(names(gms)) == TRUE){i} else {names(gms)[i]}
group_names = paste(metadata[[i]]$Barcode, metadata[[i]]$Group, sep = "_")
colnames(gms[[i]]) = group_names
rownames(metadata[[i]]) = group_names
}
gms
gm_1 <- gm_test[1:3 , 1:3]
gm_2 <- gm_test[2:6 , 4:6]
gm_3 <- gm_test[c(2,5:8) , 7:9]
gms <- list(Chip_A = gm_1, Chip_B = gm_2, Chip_C = gm_3)
mt_1 <- metadata_test[1:3 , ]
mt_2 <- metadata_test[2:6 , ]
mt_3 <- metadata_test[c(2,5:8) , ]
mts <- list(mt_1, mt_2, mt_3)
mts->metadata
i = 1
barcodes = colnames(gms[[i]])
barcodes
metadatat = metadata[[1]][match(barcodes, metadata[[1]]$Barcode), ]
metadatat
mts <- list(metadata_test, metadata_test, metadata_test)
metadata <-mts
barcodes = colnames(gms[[i]])
barcodes
metadatat = metadata[[i]][match(barcodes, metadata[[i]]$Barcode), ]
metadatat
metadatat["Group"] = if(is.null(names(gms)) == TRUE){i} else {names(gms)[i]}
metadtatat
metadatat
group_names = paste(metadatat$Barcode, metadatat$Group, sep = "_")
group_names
colnames(gms[[1]])
colnames(gms[[i]]) = group_names
rownames(metadata[[i]])
rownames(metadatat)
gm_1 <- gm_test[1:3 , 1:3]
gm_2 <- gm_test[2:6 , 4:6]
gm_3 <- gm_test[c(2,5:8) , 7:9]
gms <- list(Chip_A = gm_1, Chip_B = gm_2, Chip_C = gm_3)
mts <- list(metadata_test, metadata_test, metadata_test)
for(i in 1:length(gms)){
barcodes = colnames(gms[[i]])
metadata[[i]] = metadata[[i]][match(barcodes, metadata[[i]]$Barcode), ]
metadata[[i]]["Group"] = if(is.null(names(gms)) == TRUE){i} else {names(gms)[i]}
group_names = paste(metadata[[i]]$Barcode, metadata[[i]]$Group, sep = "_")
colnames(gms[[i]]) = group_names
rownames(metadata[[i]]) = group_names
}
metadata
gms
metadata = Reduce(rbind, metadata)
metadata
intersect_genes = Reduce(intersect, lapply(gms, rownames))
gms_merged = Reduce(cbind, lapply(gms, function(x) x[intersect_genes, ]))
gms_merged
intersect_genes
gm_1 <- gm_test[1:3 , 1:3]
gm_2 <- gm_test[2:6 , 4:6]
gm_3 <- gm_test[c(2:3,5:8) , 7:9]
gms <- list(Chip_A = gm_1, Chip_B = gm_2, Chip_C = gm_3)
mts <- list(metadata_test, metadata_test, metadata_test)
gms_union <- gm.merger(gms, mts, type = "union")
gms_intersect <- gm.merger(gms, mts, type = "intersect")
gms_union
gm_test <- gm.reader("./ex_data/raw_data/human/dummy/A375.100K.withUMI.csv", type = "gm")
gm_test <- t(gm_test)
head(gm_test[, 1:3])
metadata_test <- gm.reader("./ex_data/raw_data/human/A375.scaled_100K.report.csv", type = "metadata")
head(metadata_test[, 1:3])
metadata_header_test <- gm.reader("./ex_data/raw_data/human/A375.scaled_100K.report.csv", type = "metadata_header")
head(metadata_header_test)
gm_1 <- gm_test[1:3 , 1:3]
gm_2 <- gm_test[2:6 , 4:6]
gm_3 <- gm_test[c(2:3,5:8) , 7:9]
gms <- list(Chip_A = gm_1, Chip_B = gm_2, Chip_C = gm_3)
mts <- list(metadata_test, metadata_test, metadata_test)
gms_union <- gm.merger(gms, mts, type = "union")
gms_intersect <- gm.merger(gms, mts, type = "intersect")
gm_test <- gm.reader("/Users/chardy/Desktop/tests/ex_data/raw_data/human/dummy/A375.100K.withUMI.csv", type = "gm")
gm_test <- t(gm_test)
head(gm_test[, 1:3])
metadata_test <- gm.reader("/Users/chardy/Desktop/tests/ex_data/raw_data/human/A375.scaled_100K.report.csv", type = "metadata")
head(metadata_test[, 1:3])
metadata_header_test <- gm.reader("/Users/chardy/Desktop/tests/ex_data/raw_data/human/A375.scaled_100K.report.csv", type = "metadata_header")
head(metadata_header_test)
gm_1 <- gm_test[1:3 , 1:3]
gm_2 <- gm_test[2:6 , 4:6]
gm_3 <- gm_test[c(2:3,5:8) , 7:9]
gms <- list(Chip_A = gm_1, Chip_B = gm_2, Chip_C = gm_3)
mts <- list(metadata_test, metadata_test, metadata_test)
gms_union <- gm.merger(gms, mts, type = "union")
gms_intersect <- gm.merger(gms, mts, type = "intersect")
plot(gm_test_norm_tps[, 1], gm_test_norm_tps[, 2])
points(gm_test[, 1], gm_test[, 2], col = 'red')
gm_test_norm_tps <- gm.norm(gm_test, method = "tps", scale = 1e6)
plot(gm_test_norm_tps[, 1], gm_test_norm_tps[, 2])
points(gm_test[, 1], gm_test[, 2], col = 'red')
abline(0,1)
gm_test_norm_tps <- gm.norm(gm_test, method = "tps", scale = 1e4)
plot(gm_test_norm_tps[, 1], gm_test_norm_tps[, 2])
points(gm_test[, 1], gm_test[, 2], col = 'red')
plot(gm_test[, 1], gm_test[, 2], col = 'red')
points(gm_test_norm_tps[, 1], gm_test_norm_tps[, 2])
abline(0,1)
legend('topleft', col = c("black", "red"), legend = c("raw", "tps (10K)"), pch = 19)
par(mfrow = c(2,1), pty = 's')
plot(gm_test[, 1], gm_test[, 2], xlab = "barcode 1", ylab = "barcode 2", main = "transcripts per scale (10K)", font.main = 3)
points(gm_test_norm_tps[, 1], gm_test_norm_tps[, 2], col = 'red')
abline(0, 1)
legend('topleft', col = c("black", "red"), legend = c("raw", "tps (10K)"), pch = 19, bty = 'n')
plot(gm_test[, 1], gm_test[, 2], xlab = "barcode 1", ylab = "barcode 2", main = "cell coverage by median coverage", font.main = 3)
points(gm_test_norm_cc_mc[, 1], gm_test_norm_cc_mc[, 2], col = 'red')
abline(0, 1)
legend('topleft', col = c("black", "red"), legend = c("raw", "cc / mc"), pch = 19, bty = 'n')
head(gm_test[, 1:3])
gm_test_norm_tps <- gm.norm(gm_test, method = "tps", scale = 1e4)
head(gm_test_norm_tps[, 1:3])
gm_test_norm_cc_mc <- gm.norm(gm_test, method = "cc_mc")
head(gm_test_norm_cc_mc[, 1:3])
par(mfrow = c(1, 2), pty = 's')
plot(gm_test[, 1], gm_test[, 2], xlab = "barcode 1", ylab = "barcode 2", main = "transcripts per scale (10K)", font.main = 3)
points(gm_test_norm_tps[, 1], gm_test_norm_tps[, 2], col = 'red')
abline(0, 1)
legend('topleft', col = c("black", "red"), legend = c("raw", "tps (10K)"), pch = 19, bty = 'n')
plot(gm_test[, 1], gm_test[, 2], xlab = "barcode 1", ylab = "barcode 2", main = "cell coverage by median coverage", font.main = 3)
points(gm_test_norm_cc_mc[, 1], gm_test_norm_cc_mc[, 2], col = 'red')
abline(0, 1)
legend('topleft', col = c("black", "red"), legend = c("raw", "cc / mc"), pch = 19, bty = 'n')
head(gm_test[, 1:3])
gm_test_norm_tps <- gm.norm(gm_test, method = "tps", scale = 1e4)
head(gm_test_norm_tps[, 1:3])
gm_test_norm_cc_mc <- gm.norm(gm_test, method = "cc_mc")
head(gm_test_norm_cc_mc[, 1:3])
par(mfrow = c(1, 2), pty = 's')
plot(gm_test[, 1], gm_test[, 2], xlab = "barcode 1", ylab = "barcode 2", main = "transcripts per scale (10K)", font.main = 3, pch = 19, col = rgb(0, 0, 0, 0.5))
points(gm_test_norm_tps[, 1], gm_test_norm_tps[, 2], col = rgb(1, 0, 0, 0.5), pch = 19)
abline(0, 1)
legend('topleft', col = c("black", "red"), legend = c("raw", "tps (10K)"), pch = 19, bty = 'n')
plot(gm_test[, 1], gm_test[, 2], xlab = "barcode 1", ylab = "barcode 2", main = "cell coverage by median coverage", font.main = 3, pch = 19)
points(gm_test_norm_cc_mc[, 1], gm_test_norm_cc_mc[, 2], col = rgb(1, 0, 0, 0.5), pch = 19)
abline(0, 1)
legend('topleft', col = c("black", "red"), legend = c("raw", "cc / mc"), pch = 19, bty = 'n')
head(gm_test[, 1:3])
gm_test_norm_tps <- gm.norm(gm_test, method = "tps", scale = 1e4)
head(gm_test_norm_tps[, 1:3])
gm_test_norm_cc_mc <- gm.norm(gm_test, method = "cc_mc")
head(gm_test_norm_cc_mc[, 1:3])
par(mfrow = c(1, 2), pty = 's')
plot(gm_test[, 1], gm_test[, 2], xlab = "barcode 1", ylab = "barcode 2", main = "transcripts per scale (10K)", font.main = 3, pch = 19, col = rgb(0, 0, 0, 0.5))
points(gm_test_norm_tps[, 1], gm_test_norm_tps[, 2], col = rgb(1, 0, 0, 0.5), pch = 19)
abline(0, 1)
legend('topleft', col = c(rgb(0, 0, 0, 0.5), rgb(1, 0, 0, 0.5)), legend = c("raw", "tps (10K)"), pch = 19, bty = 'n')
plot(gm_test[, 1], gm_test[, 2], xlab = "barcode 1", ylab = "barcode 2", main = "cell coverage by median coverage", font.main = 3, pch = 19)
points(gm_test_norm_cc_mc[, 1], gm_test_norm_cc_mc[, 2], col = rgb(1, 0, 0, 0.5), pch = 19, col = rgb(0, 0, 0, 0.5))
abline(0, 1)
legend('topleft', col = c(rgb(0, 0, 0, 0.5), rgb(1, 0, 0, 0.5)), legend = c("raw", "cc / mc"), pch = 19, bty = 'n')
head(gm_test[, 1:3])
gm_test_norm_tps <- gm.norm(gm_test, method = "tps", scale = 1e4)
head(gm_test_norm_tps[, 1:3])
gm_test_norm_cc_mc <- gm.norm(gm_test, method = "cc_mc")
head(gm_test_norm_cc_mc[, 1:3])
par(mfrow = c(1, 2), pty = 's')
plot(gm_test[, 1], gm_test[, 2], xlab = "barcode 1", ylab = "barcode 2", main = "transcripts per scale (10K)", font.main = 3, pch = 19, col = rgb(0, 0, 0, 0.5))
points(gm_test_norm_tps[, 1], gm_test_norm_tps[, 2], col = rgb(1, 0, 0, 0.5), pch = 19)
abline(0, 1)
legend('topleft', col = c(rgb(0, 0, 0, 0.5), rgb(1, 0, 0, 0.5)), legend = c("raw", "tps (10K)"), pch = 19, bty = 'n')
plot(gm_test[, 1], gm_test[, 2], xlab = "barcode 1", ylab = "barcode 2", main = "cell coverage by median coverage", font.main = 3, pch = 19, col = rgb(0, 0, 0, 0.5))
points(gm_test_norm_cc_mc[, 1], gm_test_norm_cc_mc[, 2], col = rgb(1, 0, 0, 0.5), pch = 19)
abline(0, 1)
legend('topleft', col = c(rgb(0, 0, 0, 0.5), rgb(1, 0, 0, 0.5)), legend = c("raw", "cc / mc"), pch = 19, bty = 'n')
?qc.mad
seq(1, 10)
qc.mad(v = test_v, mad_devs = 3)
test_v <- seq(1, 10)
qc.mad(v = test_v, mad_devs = 3)
test_v <- seq(1, 20)
qc.mad(v = test_v, mad_devs = 3)
test_v <- seq(1, 100)
qc.mad(v = test_v, mad_devs = 3)
test_v <- c(4, 5, 6)
qc.mad(v = test_v, mad_devs = 3)
test_v <- c(3, 5, 7)
qc.mad(v = test_v, mad_devs = 3)
test_v <- c(7, 10, 13)
qc.mad(v = test_v, mad_devs = 3)
median(3, 3, 0)
median(3, 0, 3)
median(c(3, 0, 3))
qc.mad(v = test_v, mad_devs = 3)
qc.flag_cells_lowcov()
qc.flag_cells_lowcov(gm_test)
?qc.flag_cells_lowcov
1e4
qc.flag_cells_lowcov(gm_test, mad_devs = 3, abs_thresh = 1e4)
qc.flag_cells_lowcov(gm, mad_devs = 3, abs_thresh = 1e4)
head(gm_test[,1:3])
hist(colSums(gm_test))
hist(colSums(gm_test), xlim = c(0, max(colSums(gm_test))))
graphics.off()
hist(colSums(gm_test), xlim = c(0, max(colSums(gm_test))))
hist(colSums(gm_test), xlim = c(0, max(colSums(gm_test)) * 1.1))
mad_devs(colSums(gm_test), mad_devs = 3)
qc.mad(colSums(gm_test), mad_devs = 3)
abline(v = qc.mad(colSums(gm_test), mad_devs = 3), col = 'red')
abline(v = qc.mad(colSums(gm_test), mad_devs = 3), col = 'red', lty = 3)
hist(colSums(gm_test), xlim = c(0, max(colSums(gm_test)) * 1.1))
abline(v = qc.mad(colSums(gm_test), mad_devs = 3), col = 'red')
graphics.off()
hist(colSums(gm_test), xlim = c(0, max(colSums(gm_test)) * 1.1))
abline(v = qc.mad(colSums(gm_test), mad_devs = 3), col = 'red')
hist(colSums(gm_test), xlim = c(0, max(colSums(gm_test)) * 1.1))
abline(v = qc.mad(colSums(gm_test), mad_devs = 3), col = 'red', lty = 3)
hist(colSums(gm_test), xlim = c(0, max(colSums(gm_test)) * 1.1), xlab = "cell coverage")
abline(v = qc.mad(colSums(gm_test), mad_devs = 3), col = 'red', lty = 3)
hist(colSums(gm_test), xlim = c(0, max(colSums(gm_test)) * 1.1), xlab = "cell coverage", main = "")
abline(v = qc.mad(colSums(gm_test), mad_devs = 3), col = 'red', lty = 3)
dim(gm_test)
dim(gm_test[ , drops])
# Flag cells to remove that have < 3 MADs from Median read coverage or less than the absolute threshold (10K).
drops <- qc.flag_cells_lowcov(gm, mad_devs = 3, abs_thresh = 1e4)
hist(colSums(gm_test), xlim = c(0, max(colSums(gm_test)) * 1.1), xlab = "cell coverage")
abline(v = qc.mad(colSums(gm_test), mad_devs = 3), col = 'red', lty = 3)
dim(gm_test)
dim(gm_test[ , drops])
# Flag cells to remove that have < 3 MADs from Median read coverage or less than the absolute threshold (10K).
drops <- qc.flag_cells_lowcov(gm, mad_devs = 3, abs_thresh = 1e4)
hist(colSums(gm_test), xlim = c(0, max(colSums(gm_test)) * 1.1), xlab = "cell coverage")
abline(v = qc.mad(colSums(gm_test), mad_devs = 3), col = 'red', lty = 3)
dim(gm_test)
dim(gm_test[ , drops])
drops <- qc.flag_cells_lowcov(gm_test, mad_devs = 3, abs_thresh = 1e4)
hist(colSums(gm_test), xlim = c(0, max(colSums(gm_test)) * 1.1), xlab = "cell coverage")
abline(v = qc.mad(colSums(gm_test), mad_devs = 3), col = 'red', lty = 3)
dim(gm_test)
dim(gm_test[ , drops])
drops <- qc.flag_cells_lowcov(gm_test, mad_devs = 3, abs_thresh = 1e4)
hist(colSums(gm_test), xlim = c(0, max(colSums(gm_test)) * 1.1), xlab = "cell coverage")
abline(v = qc.mad(colSums(gm_test), mad_devs = 3), col = 'red', lty = 3)
dim(gm_test)
dim(gm_test[ , drops])
drops
colSums(gm_test)
dim(gm_test[ , !(drops)])
dim(gm_test)
dim(gm_test[ , !(drops)])
?qc.flag_cells_lowgenecount()
detach('package:icell8', unload = T)
library(icell8)
drops <- qc.flag_cells_lowgenecount(gm_test, mad_devs = 3, abs_thresh = 1e4)\
drops <- qc.flag_cells_lowgenecount(gm_test, mad_devs = 3, abs_thresh = 3)
drops
drops <- qc.flag_cells_lowgenecount(gm_test, mad_devs = 3, abs_thresh = 3)
drops <- qc.flag_cells_lowgenecount(gm_test, mad_devs = 3, abs_thresh = 3)
detach('package:icell8', unload = T)
library(icell8)
drops <- qc.flag_cells_lowgenecount(gm_test, mad_devs = 3, abs_thresh = 3)
drops
dim(gm_test)
dim(gm_test[ , !(drops)])
# Flag cells to remove that have < 3 MADs from Median gene counts or less than the absolute threshold (3).
drops <- qc.flag_cells_lowgenecount(gm_test, mad_devs = 3, abs_thresh = 3)
dim(gm_test)
dim(gm_test[ , !(drops)])
hist(colSums(gm_test != 0), xlim = c(0, max(colSums(gm_test != 0)) * 1.1), xlab = "gene counts")
abline(v = qc.mad(colSums(gm_test != 0), mad_devs = 3), col = 'red', lty = 3)
# Flag cells to remove that have < 3 MADs from Median gene counts or less than the absolute threshold (3500).
drops <- qc.flag_cells_lowgenecount(gm_test, mad_devs = 3, abs_thresh = 3500)
dim(gm_test)
dim(gm_test[ , !(drops)])
hist(colSums(gm_test != 0), xlim = c(0, max(colSums(gm_test != 0)) * 1.1), xlab = "gene counts")
abline(v = qc.mad(colSums(gm_test != 0), mad_devs = 3), col = 'red', lty = 3)
# Flag cells to remove that have < 3 MADs from Median gene counts or less than the absolute threshold (3500).
drops <- qc.flag_cells_lowgenecount(gm_test, mad_devs = 3, abs_thresh = 3500)
dim(gm_test)
dim(gm_test[ , !(drops)])
hist(colSums(gm_test != 0), xlim = c(0, max(colSums(gm_test != 0)) * 1.1), xlab = "gene counts")
abline(v = max(c(qc.mad(colSums(gm_test != 0), 3500)), mad_devs = 3), col = 'red', lty = 3)
max(c(qc.mad(colSums(gm_test != 0), 3500))
)
abline(v = max(c(qc.mad(colSums(gm_test != 0)), 3500), mad_devs = 3), col = 'red', lty = 3)
abline(v = max(c(qc.mad(colSums(gm_test != 0), mad_devs = 3), 3500), mad_devs = 3), col = 'red', lty = 3)
cell_count_thresh = 3250
drops <- qc.flag_cells_lowgenecount(gm_test, mad_devs = 3, abs_thresh = cell_count_thresh)
dim(gm_test)
dim(gm_test[ , !(drops)])
hist(colSums(gm_test != 0), xlim = c(0, max(colSums(gm_test != 0)) * 1.1), xlab = "gene counts")
abline(v = max(c(qc.mad(colSums(gm_test != 0), mad_devs = 3), cell_count_thresh), mad_devs = 3), col = 'red', lty = 3)
cell_count_thresh = 3750
drops <- qc.flag_cells_lowgenecount(gm_test, mad_devs = 3, abs_thresh = cell_count_thresh)
dim(gm_test)
dim(gm_test[ , !(drops)])
hist(colSums(gm_test != 0), xlim = c(0, max(colSums(gm_test != 0)) * 1.1), xlab = "gene counts")
abline(v = max(c(qc.mad(colSums(gm_test != 0), mad_devs = 3), cell_count_thresh), mad_devs = 3), col = 'red', lty = 3)
qc.flag_genes_lowcov()
?qc.flag_genes_lowcov()
gene_cov_thresh = 5
drops <- qc.flag_genes_lowcov(gm_test, exp_cutoff = gene_cov_thresh)
dim(gm_test)
dim(gm_test[ , !(drops)])
hist(rowSums(gm_test), xlim = c(0, max(rowSums(gm_test)) * 1.1), xlab = "gene counts")
abline(v = gene_cov_thresh, col = 'red', lty = 3)
hist(rowSums(gm_test), xlim = c(0, max(rowSums(gm_test)) * 1.1), xlab = "gene counts", breaks = 1000)
abline(v = gene_cov_thresh, col = 'red', lty = 3)
max(rowSums(gm_test))
hist(rowSums(gm_test), xlim = c(0, 5000), xlab = "gene counts", breaks = 1000)
abline(v = gene_cov_thresh, col = 'red', lty = 3)
hist(rowSums(gm_test), xlim = c(0, 1000), xlab = "gene counts", breaks = 1000)
abline(v = gene_cov_thresh, col = 'red', lty = 3)
hist(log(rowSums(gm_test)), xlim = c(0, 1000), xlab = "gene counts", breaks = 1000)
abline(v = gene_cov_thresh, col = 'red', lty = 3)
hist(log(rowSums(gm_test)), xlim = c(0, max(rowSums(gm_test) * 1.1), xlab = "gene counts", breaks = 1000)
abline(v = gene_cov_thresh, col = 'red', lty = 3)
hist(log10(rowSums(gm_test)), xlim = c(0, max(log10(rowSums(gm_test)) * 1.1)), xlab = "gene counts", breaks = 1000)
abline(v = gene_cov_thresh, col = 'red', lty = 3)
hist(log10(rowSums(gm_test)), xlim = c(0, max(log10(rowSums(gm_test)) * 1.1)), xlab = "gene counts", breaks = 1000)
abline(v = log10(gene_cov_thresh), col = 'red', lty = 3)
hist(log2(rowSums(gm_test)), xlim = c(0, max(log2(rowSums(gm_test)) * 1.1)), xlab = "gene counts", breaks = 1000)
abline(v = log2(gene_cov_thresh), col = 'red', lty = 3)
min(rowSums(gm_test))
hist(log2(rowSums(gm_test) + 1), xlim = c(0, max(log2(rowSums(gm_test) + 1) * 1.1)), xlab = "log2 gene counts", breaks = 1000, main = "")
abline(v = log2(gene_cov_thresh + 1), col = 'red', lty = 3)
dim(gm_test)
dim(gm_test[ , !(drops)])
drops <- qc.flag_genes_lowcov(gm_test, exp_cutoff = gene_cov_thresh)
dim(gm_test)
dim(gm_test[ , !(drops)])
length(drops)
length(gm_test)
nrow(gm_test)
dim(gm_test)
dim(gm_test[!(drops) , ])
qc.flag_genes_lowcellcount()
?qc.flag_genes_lowcellcount()
drops <- qc.flag_genes_lowcellcount(gm_test, exp_cutoff = gene_cellcount_thresh)
gene_cellcount_thresh = 3
drops <- qc.flag_genes_lowcellcount(gm_test, exp_cutoff = gene_cellcount_thresh)
dim(gm_test)
dim(gm_test[!(drops) , ])
gene_cellcount_thresh = 3
drops <- qc.flag_genes_lowcellcount(gm_test, cell_count = gene_cellcount_thresh)
dim(gm_test)
dim(gm_test[!(drops) , ])
hist(log2(rowSums(gm_test != 0) + 1), xlim = c(0, max(log2(rowSums(gm_test != 0) + 1) * 1.1)), xlab = "log2 gene counts", breaks = 1000, main = "")
abline(v = log2(rowSums(gm_test != 0) + 1), col = 'red', lty = 3)
hist(rowSums(gm_test != 0), xlim = c(0, max(rowSums(gm_test != 0) * 1.1)), xlab = "log2 gene counts", breaks = 1000, main = "")
abline(v = gene_cellcount_thresh, col = 'red', lty = 3)
gene_cellcount_thresh = 3
drops <- qc.flag_genes_lowcellcount(gm_test, cell_count = gene_cellcount_thresh)
dim(gm_test)
dim(gm_test[!(drops) , ])
hist(rowSums(gm_test != 0), xlim = c(0, max(rowSums(gm_test != 0) * 1.1)), xlab = "log2 gene counts", breaks = 1000, main = "")
abline(v = gene_cellcount_thresh, col = 'red', lty = 3)
?gm.qc
gm_out <- gm.qc(gm_test, gm_qcfilt = TRUE, gm_norm = T, gm_norm_method = "tps", gm_norm_scale = 1e4, gm_log = FALSE)
head(gm_out[,1:3])
gm_test_norm_tps
identical(gm_out[ , 1:3], gm_test_norm_tps[ , 1:3])
gm_test_norm_tps[ , 1:3]
head(gm_test_norm_tps[ , 1:3])
head(gm_out[ , 1:3])
gm_test_norm_tps <- gm.norm(gm_test, method = "tps", scale = 1e4)
head(gm_test_norm[,1:3])
head(gm_out[,1:3])
dim(gm_test)
head(gm_test[,1:3])
gm_out <- gm.qc(gm_test, gm_qcfilt = TRUE, gm_norm = TRUE, gm_norm_method = "tps", gm_norm_scale = 1e4, gm_log = FALSE)
head(gm_out[,1:3])
plot(gm[,1], gm[,2])
plot(gm_out[,1], gm_out[,2])
abline(0,1)
gm_test_norm_tps <- gm.norm(gm_test, method = "tps", scale = 1e4)
gm_test_norm_tps
gm_test_norm_tps[1:6,1:3]
head(gm_out[,1:3])
identical(colnames(gm_out), colnames(gm_test_norm_tps))
identical(rownames(gm_out), rownames(gm_test_norm_tps))
head(gm_out[,1:3])
head(gm_test_norm_tps[,1:3])
gm_out <- gm.qc(gm_test, gm_qcfilt = FALSE, gm_norm = TRUE, gm_norm_method = "tps", gm_norm_scale = 1e4, gm_log = FALSE)
head(gm_test_norm_tps[,1:3])
identical(gm_out[ , 1:3], gm_test_norm_tps[ , 1:3])
identical(gm_out[ , 1:3], gm_test_norm_cc_mc[ , 1:3])gm_out <- gm.qc(gm_test, gm_qcfilt = FALSE, gm_norm = TRUE, gm_norm_method = "cc_mc", gm_log = FALSE)
identical(gm_out[ , 1:3], gm_test_norm_cc_mc[ , 1:3])
gm_out <- gm.qc(gm_test, gm_qcfilt = FALSE, gm_norm = TRUE, gm_norm_method = "cc_mc", gm_log = FALSE)
identical(gm_out[ , 1:3], gm_test_norm_cc_mc[ , 1:3])
identical(gm_out[ , 1:3], gm.log(gm_test[, 1:3], log_base = "ln"))
gm_out <- gm.qc(gm_test, gm_qcfilt = FALSE, gm_norm = FALSE, gm_log = TRUE, gm_log_base = "ln")
identical(gm_out[ , 1:3], gm.log(gm_test[, 1:3], log_base = "ln"))
gm_out <- gm.qc(gm_test, gm_qcfilt = FALSE, gm_norm = FALSE, gm_log = TRUE, gm_log_base = 2)
identical(gm_out[ , 1:3], gm.log(gm_test[, 1:3], log_base = 2))
gm_out <- gm.qc(gm_test, gm_qcfilt = FALSE, gm_norm = TRUE, gm_norm_method = "tps", gm_norm_scale = 1e4, gm_log = FALSE)
identical(gm_out, gm_test_norm_tps)
gm_out <- gm.qc(gm_test, gm_qcfilt = FALSE, gm_norm = TRUE, gm_norm_method = "cc_mc", gm_log = FALSE)
identical(gm_out, gm_test_norm_cc_mc)
gm_out <- gm.qc(gm_test, gm_qcfilt = FALSE, gm_norm = FALSE, gm_log = TRUE, gm_log_base = "ln")
identical(gm_out, gm.log(gm_test, log_base = "ln"))
gm_out <- gm.qc(gm_test, gm_qcfilt = FALSE, gm_norm = FALSE, gm_log = TRUE, gm_log_base = 2)
identical(gm_out, gm.log(gm_test, log_base = 2))
?gm.qc
gm_out <- gm.qc(gm_test, gm_qcfilt = TRUE, gm_norm = FALSE, gm_log = FALSE, gene_cellcount = 100)
dim(gm_out)
gm_out <- gm.qc(gm_test, gm_qcfilt = TRUE, gm_norm = FALSE, gm_log = FALSE, gene_cellcount = 2)
dim(gm_out)
gm_out <- gm.qc(gm_test, gm_qcfilt = TRUE, gm_norm = FALSE, gm_log = FALSE, cell_abslowcov = 2e4)
drops <- qc.flag_cells_lowcov(gm_test, mad_devs = 3, abs_thresh = 2e4)
identical(gm_out, gm_test[ , !(drops)]))
gm_out <- gm.qc(gm_test, gm_qcfilt = TRUE, gm_norm = FALSE, gm_log = FALSE, cell_abslowcov = 2e4)
drops <- qc.flag_cells_lowcov(gm_test, mad_devs = 3, abs_thresh = 2e4)
identical(gm_out, gm_test[ , !(drops)])
dim(gm_out)
dim(gm_test[,!(drops)])
drp[s]
drops
dim(gm_out)
gm_out <- gm.qc(gm_test, gm_qcfilt = TRUE, gm_norm = FALSE, gm_log = FALSE,
cell_abslowcov = 2e4, cells_abslowgenecount = 0, gene_cellcount = 0, gene_totcov = 0)
drops <- qc.flag_cells_lowcov(gm_test, mad_devs = 3, abs_thresh = 2e4)
identical(gm_out, gm_test[ , !(drops)])
dim(gm_out)
dim(gm_test)
shiny::runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
shiny::runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
ceiling(10)
ceiling(10.1)
ceiling(1)
ceiling(0)
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
?toggleModal
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
withProgress
?withProgress
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
?HTML
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
intall.packages('shinydashboard')
install.packages('shinydashboard')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
?fileInput
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
?bsModal
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
?bsModal
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
?observeEvent
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
?actionButton
?modalButton
?tagList
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
?column
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
?fluidRow
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
runApp('Desktop/icell8_dev/scripts/tertiary_analysis/tsne_shiny')
